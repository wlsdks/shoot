server:
  port: 8100

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/member
    username: root
    password: 1234
    driver-class-name: org.postgresql.Driver

  # JPA 설정
  jpa:
    database: POSTGRESQL
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: update
    open-in-view: false
    # show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 10
        highlight_sql: true
  data:
    # 몽고 DB 설정
    mongodb:
      authentication-database: shoot
      username: admin
      password: admin123
      host: localhost
      port: 27017
      database: shoot
    # 레디스 설정
    redis:
      host: localhost
      port: 6379
      password: redis
      # 연결 안정성 향상을 위한 설정
      connect-timeout: 2000  # 연결 타임아웃 (ms)
      timeout: 3000          # 작업 타임아웃 (ms)
      lettuce:
        pool:
          max-active: 8      # 최대 활성 연결 수
          max-idle: 8        # 최대 유휴 연결 수
          min-idle: 2        # 최소 유휴 연결 수
          max-wait: 1000     # 연결 풀이 소진됐을 때 최대 대기 시간 (ms)
        shutdown-timeout: 100 # 셧다운 타임아웃 (ms)
  # 카프카 설정
  kafka:
    consumer:
      bootstrap-servers: localhost:10000,localhost:10001,localhost:10002
      group-id: shoot
      # 컨슈머 최적화 설정 (실시간 전달)
      auto-offset-reset: latest
      enable-auto-commit: false
      fetch-min-bytes: 1           # 최소 1바이트만 있어도 즉시 반환 (레이턴시 최소화)
      fetch-max-wait: 10           # 최대 10ms 대기
      max-poll-records: 100        # 한번에 100개 처리
    producer:
      bootstrap-servers: localhost:10000,localhost:10001,localhost:10002
      # 프로듀서 최적화 설정 (저지연)
      acks: 1                      # leader만 확인 (빠른 전송)
      compression-type: none       # 압축 안함 (CPU 절약)
      batch-size: 16384            # 16KB 배치 크기
      linger-ms: 0                 # 즉시 전송 (배칭 대기 안함)
      properties:
        enable.idempotence: true   # 중복 메시지 방지
        max.in.flight.requests.per.connection: 5
    topics:
      chat-messages:
        partitions: 3              # 병렬 처리용 (consumer concurrency와 일치)
        replicas: 2                # 복제 팩터
      chat-notifications:
        partitions: 3
        replicas: 2
      chat-events:
        partitions: 3
        replicas: 2
      dead-letter-topic:
        partitions: 1
        replicas: 2
        retention-ms: 604800000    # 7일 (ms)

  # 파일 업로드 설정
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

redis:
  lock:
    lock-timeout: 10000      # 락 타임아웃 (ms)
    lock-wait-timeout: 2000  # 락 대기 타임아웃 (ms)
    max-retries: 3           # 최대 재시도 횟수

# 알림 설정
notification:
  # 알림 전송 방식 (redis 또는 kafka)
  transport: redis

# 파일 업로드 설정은 spring 섹션에 있음

# 로깅 설정
logging:
  level:
    root: INFO
    com.stark.shoot: INFO
    org.springframework.data.mongodb: INFO
    org.springframework.messaging: INFO
    org.springframework.web: INFO
    org.springframework.kafka: INFO
    org.apache.kafka.clients.consumer.ConsumerConfig: WARN
    org.apache.kafka.clients.producer.ProducerConfig: WARN

jwt:
  # JWT 시크릿 키 (최소 32바이트 길이의 랜덤 문자열 사용 권장)
  # 프로덕션 환경에서는 환경 변수나 외부 시크릿 관리 시스템 사용 권장
  # 예: Base64로 인코딩된 256비트(32바이트) 키
  secret: "${JWT_SECRET:your-256-bit-secret-key-base64-encoded}"
  # 액세스 토큰 만료 시간 (분)
  expiration: 60
  # JWT 발급자 (issuer)
  issuer: "shoot-app"
  # JWT 대상자 (audience)
  audience: "shoot-clients"
  refresh-token:
    # 리프레시 토큰 만료 시간 (분) - 기본값 30일
    expiration: 43200

# 도메인 규칙 설정
app:
  domain:
    chat-room:
      max-participants: 100        # 그룹 채팅 최대 참여자 수
      min-group-participants: 2    # 그룹 채팅 최소 참여자 수
      max-pinned-messages: 5       # 채팅방 최대 고정 메시지 수
    message:
      max-content-length: 4000     # 메시지 최대 길이
      max-attachment-size: 52428800 # 첨부파일 최대 크기 (50MB)
      batch-size: 100              # 메시지 배치 처리 크기
    friend:
      max-friend-count: 1000       # 최대 친구 수
      recommendation-limit: 20     # 친구 추천 기본 제한
